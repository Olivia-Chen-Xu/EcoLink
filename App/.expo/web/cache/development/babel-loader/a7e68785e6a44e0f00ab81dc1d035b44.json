{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { Feather } from \"@expo/vector-icons\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport MapPage from \"./MapPage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nexport default function Scan(_ref) {\n  var locations = _ref.locations,\n      currentLoc = _ref.currentLoc,\n      posts = _ref.posts,\n      setPosts = _ref.setPosts,\n      ownPosts = _ref.ownPosts,\n      setOwnPosts = _ref.setOwnPosts;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      status = _useState4[0],\n      setStatus = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      types = _useState6[0],\n      setTypes = _useState6[1];\n\n  var API_KEY = \"Enter your API key here\";\n  var API_URL = \"https://vision.googleapis.com/v1/images:annotate?key=\" + API_KEY;\n\n  function callGoogleVisionAsync(image, uri) {\n    var body, response, result, results;\n    return _regeneratorRuntime.async(function callGoogleVisionAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            body = {\n              requests: [{\n                image: {\n                  content: image\n                },\n                features: [{\n                  type: \"LABEL_DETECTION\",\n                  maxResults: 3\n                }]\n              }]\n            };\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(API_URL, {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(body)\n            }));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            result = _context.sent;\n            results = [];\n            result.responses[0].labelAnnotations.map(function (obj) {\n              results.push({\n                kind: obj.description,\n                accuracy: obj.score\n              });\n            });\n            console.log(\"callGoogleVisionAsync -> result\", results);\n            setTypes(results);\n            setPosts([{\n              user: \"Olivia\",\n              userInfo: \"CS Student at Queen's\",\n              pfp: \"/Users/oliviachenxu/Documents/QueensGDSC/App/assets/olivia.jpg\",\n              image: uri,\n              description: \"🎉 Earned 40 points for scanning an item 🎉\",\n              createdAt: new Date()\n            }].concat(_toConsumableArray(posts)));\n            setOwnPosts([{\n              user: \"Olivia\",\n              userInfo: \"CS Student at Queen's\",\n              pfp: \"/Users/oliviachenxu/Documents/QueensGDSC/App/assets/olivia.jpg\",\n              image: uri,\n              description: \"🎉 Earned 40 points for scanning an item 🎉\",\n              createdAt: new Date()\n            }].concat(_toConsumableArray(ownPosts)));\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  var pickImage = function pickImage() {\n    var _await$ImagePicker$la, cancelled, uri, base64, result;\n\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              base64: true\n            }));\n\n          case 2:\n            _await$ImagePicker$la = _context2.sent;\n            cancelled = _await$ImagePicker$la.cancelled;\n            uri = _await$ImagePicker$la.uri;\n            base64 = _await$ImagePicker$la.base64;\n\n            if (cancelled) {\n              _context2.next = 20;\n              break;\n            }\n\n            setImage(uri);\n            _context2.prev = 8;\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(callGoogleVisionAsync(base64, uri));\n\n          case 11:\n            result = _context2.sent;\n            setStatus(result);\n            _context2.next = 18;\n            break;\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](8);\n            setStatus(\"Error: \" + _context2.t0.message);\n\n          case 18:\n            _context2.next = 22;\n            break;\n\n          case 20:\n            setImage(null);\n            setStatus(null);\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[8, 15]], Promise);\n  };\n\n  var openCamera = function openCamera() {\n    var permissionResult, _await$ImagePicker$la2, cancelled, uri, base64, result;\n\n    return _regeneratorRuntime.async(function openCamera$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestCameraPermissionsAsync());\n\n          case 2:\n            permissionResult = _context3.sent;\n\n            if (!(permissionResult.granted === false)) {\n              _context3.next = 6;\n              break;\n            }\n\n            alert(\"You've refused to allow this appp to access your camera!\");\n            return _context3.abrupt(\"return\");\n\n          case 6:\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.launchCameraAsync({\n              base64: true\n            }));\n\n          case 8:\n            _await$ImagePicker$la2 = _context3.sent;\n            cancelled = _await$ImagePicker$la2.cancelled;\n            uri = _await$ImagePicker$la2.uri;\n            base64 = _await$ImagePicker$la2.base64;\n\n            if (cancelled) {\n              _context3.next = 27;\n              break;\n            }\n\n            setImage(uri);\n            setStatus(\"Loading...\");\n            _context3.prev = 15;\n            _context3.next = 18;\n            return _regeneratorRuntime.awrap(callGoogleVisionAsync(base64, uri));\n\n          case 18:\n            result = _context3.sent;\n            setStatus(result);\n            _context3.next = 25;\n            break;\n\n          case 22:\n            _context3.prev = 22;\n            _context3.t0 = _context3[\"catch\"](15);\n            setStatus(\"Error: \" + _context3.t0.message);\n\n          case 25:\n            _context3.next = 29;\n            break;\n\n          case 27:\n            setImage(null);\n            setStatus(null);\n\n          case 29:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[15, 22]], Promise);\n  };\n\n  var Main = function Main(_ref2) {\n    var navigation = _ref2.navigation;\n    return _jsx(SafeAreaView, {\n      children: image ? _jsxs(ScrollView, {\n        children: [_jsxs(View, {\n          style: {\n            backgroundColor: \"#5DB075\",\n            height: 200\n          },\n          children: [_jsxs(TouchableOpacity, {\n            style: {\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              marginTop: 10\n            },\n            onPress: function onPress() {\n              setTypes(null);\n              setImage(null);\n            },\n            children: [_jsx(Feather, {\n              name: \"chevrons-left\",\n              size: 30,\n              color: \"white\"\n            }), _jsx(Text, {\n              style: {\n                color: \"white\",\n                fontWeight: \"600\",\n                fontSize: 16\n              },\n              children: \"Back\"\n            })]\n          }), _jsx(Text, {\n            style: {\n              alignSelf: \"center\",\n              color: \"white\",\n              fontSize: 30,\n              fontWeight: \"700\"\n            },\n            children: \"Scan Results \\uD83D\\uDD0E\"\n          })]\n        }), _jsx(View, {\n          style: {\n            position: \"absolute\",\n            alignSelf: \"center\",\n            top: 100,\n            shadowColor: \"black\",\n            shadowOpacity: 0.2,\n            shadowRadius: 10\n          },\n          children: _jsx(Image, {\n            source: {\n              uri: image\n            },\n            style: {\n              width: 160,\n              height: 160,\n              borderRadius: 80\n            }\n          })\n        }), _jsxs(View, {\n          style: {\n            alignItems: \"center\",\n            paddingVertical: 80\n          },\n          children: [_jsx(Text, {\n            style: {\n              fontSize: 28,\n              fontWeight: \"700\"\n            },\n            children: \"You have scanned:\"\n          }), !types && _jsx(ActivityIndicator, {\n            size: \"large\",\n            color: \"#4B9460\",\n            marginTop: 20\n          }), types && types.map(function (type) {\n            return _jsxs(View, {\n              style: {\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                marginTop: 10\n              },\n              children: [_jsx(Text, {\n                style: {\n                  fontSize: 20,\n                  fontWeight: \"600\",\n                  opacity: 0.6\n                },\n                children: type.kind\n              }), _jsx(Text, {\n                style: {\n                  opacity: 0.4\n                },\n                children: \"(\" + (type.accuracy * 100).toFixed(2) + \"% likely)\"\n              })]\n            });\n          }), types && _jsxs(_Fragment, {\n            children: [_jsx(Text, {\n              style: {\n                fontSize: 24,\n                fontWeight: \"700\",\n                marginTop: 20\n              },\n              children: \"\\uD83C\\uDF89 40 Points Earned! \\uD83C\\uDF89\"\n            }), _jsxs(View, {\n              style: styles.card,\n              children: [_jsx(Text, {\n                style: {\n                  color: \"#4B9460\",\n                  fontSize: 20,\n                  fontWeight: \"700\"\n                },\n                children: \"Recycling Categories:\"\n              }), _jsxs(View, {\n                style: {\n                  flexDirection: \"row\",\n                  marginVertical: 10,\n                  justifyContent: \"center\"\n                },\n                children: [_jsx(View, {\n                  style: styles.tag,\n                  children: _jsx(Text, {\n                    style: styles.kind,\n                    children: \"Can\"\n                  })\n                }), _jsx(View, {\n                  style: styles.tag,\n                  children: _jsx(Text, {\n                    style: styles.kind,\n                    children: \"Scrap Metal\"\n                  })\n                })]\n              }), _jsxs(TouchableOpacity, {\n                style: styles.add,\n                onPress: function onPress() {\n                  return navigation.navigate(\"MapPage\");\n                },\n                children: [_jsx(Text, {\n                  style: {\n                    color: \"white\",\n                    fontWeight: \"700\",\n                    fontSize: 16,\n                    textAlign: \"center\",\n                    marginRight: 10\n                  },\n                  children: \"\\uD83D\\uDCCDFind Nearest Recyling Bin\"\n                }), _jsx(Feather, {\n                  name: \"chevrons-right\",\n                  size: 30,\n                  color: \"white\"\n                })]\n              })]\n            }), _jsxs(View, {\n              style: styles.fact,\n              children: [_jsx(Text, {\n                style: {\n                  color: \"#4B9460\",\n                  fontSize: 20,\n                  fontWeight: \"700\"\n                },\n                children: \"\\uD83E\\uDD14Did you know?\"\n              }), _jsxs(Text, {\n                style: styles.fact_text,\n                children: [\"Companies can produce as many as 80,000,000 Aluminum cans every year?\", \" \"]\n              }), _jsx(Text, {\n                style: styles.fact_text,\n                children: \"That\\u2019s a lot of soda!\"\n              })]\n            })]\n          })]\n        })]\n      }) : _jsx(View, {\n        style: {\n          backgroundColor: \"black\",\n          justifyContent: \"center\",\n          height: \"100%\"\n        },\n        children: _jsxs(View, {\n          style: {\n            backgroundColor: \"white\",\n            alignSelf: \"center\",\n            borderRadius: 10,\n            shadowColor: \"black\",\n            shadowOpacity: 0.2,\n            shadowRadius: 50,\n            paddingHorizontal: 10,\n            paddingVertical: 10\n          },\n          children: [_jsx(Button, {\n            onPress: openCamera,\n            title: \"Open camera\",\n            color: \"grey\"\n          }), _jsx(Button, {\n            title: \"Pick an image from camera roll\",\n            onPress: pickImage,\n            color: \"grey\"\n          })]\n        })\n      })\n    });\n  };\n\n  return _jsxs(Stack.Navigator, {\n    screenOptions: {\n      headerShown: false\n    },\n    children: [_jsx(Stack.Screen, {\n      name: \"Main\",\n      component: Main\n    }), _jsx(Stack.Screen, {\n      name: \"MapPage\",\n      options: {\n        headerShown: false\n      },\n      children: function children(props) {\n        return _jsx(MapPage, _objectSpread(_objectSpread({}, props), {}, {\n          currentLoc: currentLoc,\n          locations: locations,\n          addLocationEnabled: false,\n          scanAnotherEnabled: true\n        }));\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  page: {},\n  add: {\n    alignSelf: \"center\",\n    backgroundColor: \"#5DB075\",\n    borderRadius: 30,\n    paddingHorizontal: 20,\n    paddingVertical: 15,\n    alignItems: \"center\",\n    flexDirection: \"row\"\n  },\n  tag: {\n    borderWidth: 1,\n    borderColor: \"#5DB075\",\n    paddingHorizontal: 8,\n    paddingVertical: 5,\n    borderRadius: 8,\n    marginHorizontal: 5,\n    marginVertical: 5\n  },\n  kind: {\n    color: \"#5DB075\",\n    fontSize: 12,\n    fontWeight: \"500\"\n  },\n  card: {\n    backgroundColor: \"white\",\n    width: 320,\n    borderRadius: 15,\n    marginVertical: 20,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    shadowColor: \"black\",\n    shadowOpacity: 0.1,\n    shadowRadius: 5,\n    alignItems: \"center\"\n  },\n  fact: {\n    width: 320,\n    paddingVertical: 20,\n    paddingHorizontal: 20,\n    borderRadius: 15,\n    borderColor: \"#5DB075\",\n    borderWidth: 2,\n    borderStyle: \"dashed\"\n  },\n  fact_text: {\n    marginTop: 10,\n    opacity: 0.6\n  }\n});","map":{"version":3,"sources":["/Users/oliviachenxu/Documents/QueensGDSC/App/pages/Scan.js"],"names":["React","useState","ImagePicker","Feather","createNativeStackNavigator","MapPage","Stack","Scan","locations","currentLoc","posts","setPosts","ownPosts","setOwnPosts","image","setImage","status","setStatus","types","setTypes","API_KEY","API_URL","callGoogleVisionAsync","uri","body","requests","content","features","type","maxResults","fetch","method","headers","Accept","JSON","stringify","response","json","result","results","responses","labelAnnotations","map","obj","push","kind","description","accuracy","score","console","log","user","userInfo","pfp","createdAt","Date","pickImage","launchImageLibraryAsync","base64","cancelled","message","openCamera","requestCameraPermissionsAsync","permissionResult","granted","alert","launchCameraAsync","Main","navigation","backgroundColor","height","flexDirection","alignItems","marginTop","color","fontWeight","fontSize","alignSelf","position","top","shadowColor","shadowOpacity","shadowRadius","width","borderRadius","paddingVertical","opacity","toFixed","styles","card","marginVertical","justifyContent","tag","add","navigate","textAlign","marginRight","fact","fact_text","paddingHorizontal","headerShown","props","StyleSheet","create","page","borderWidth","borderColor","marginHorizontal","borderStyle"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n    View,\n    Text,\n    SafeAreaView,\n    Image,\n    StyleSheet,\n    TouchableOpacity,\n    Button,\n    ScrollView,\n    ActivityIndicator,\n} from \"react-native\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { Feather } from \"react-native-vector-icons\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport MapPage from \"./MapPage\";\n\nconst Stack = createNativeStackNavigator();\n\nexport default function Scan({\n    locations,\n    currentLoc,\n    posts,\n    setPosts,\n    ownPosts,\n    setOwnPosts,\n}) {\n    const [image, setImage] = useState(null);\n    const [status, setStatus] = useState(null);\n    const [types, setTypes] = useState(null);\n    const API_KEY = \"Enter your API key here\";\n    const API_URL = `https://vision.googleapis.com/v1/images:annotate?key=${API_KEY}`;\n\n    async function callGoogleVisionAsync(image, uri) {\n        const body = {\n            requests: [\n                {\n                    image: {\n                        content: image,\n                    },\n                    features: [\n                        {\n                            type: \"LABEL_DETECTION\",\n                            maxResults: 3,\n                        },\n                    ],\n                },\n            ],\n        };\n\n        const response = await fetch(API_URL, {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(body),\n        });\n        const result = await response.json();\n\n        const results = [];\n        result.responses[0].labelAnnotations.map((obj) => {\n            results.push({ kind: obj.description, accuracy: obj.score });\n        });\n        console.log(\"callGoogleVisionAsync -> result\", results);\n        setTypes(results);\n        setPosts([\n            {\n                user: \"Olivia\",\n                userInfo: \"CS Student at Queen's\",\n                pfp: \"/Users/oliviachenxu/Documents/QueensGDSC/App/assets/olivia.jpg\",\n                image: uri,\n                description: \"🎉 Earned 40 points for scanning an item 🎉\",\n                createdAt: new Date(),\n            },\n            ...posts,\n        ]);\n        setOwnPosts([\n            {\n                user: \"Olivia\",\n                userInfo: \"CS Student at Queen's\",\n                pfp: \"/Users/oliviachenxu/Documents/QueensGDSC/App/assets/olivia.jpg\",\n                image: uri,\n                description: \"🎉 Earned 40 points for scanning an item 🎉\",\n                createdAt: new Date(),\n            },\n            ...ownPosts,\n        ]);\n    }\n\n    const pickImage = async () => {\n        // No permissions request is necessary for launching the image library\n        const { cancelled, uri, base64 } =\n            await ImagePicker.launchImageLibraryAsync({\n                base64: true,\n            });\n\n        if (!cancelled) {\n            setImage(uri);\n            try {\n                const result = await callGoogleVisionAsync(base64, uri);\n                setStatus(result);\n            } catch (error) {\n                setStatus(`Error: ${error.message}`);\n            }\n        } else {\n            setImage(null);\n            setStatus(null);\n        }\n    };\n    const openCamera = async () => {\n        // Ask the user for the permission to access the camera\n        const permissionResult =\n            await ImagePicker.requestCameraPermissionsAsync();\n\n        if (permissionResult.granted === false) {\n            alert(\"You've refused to allow this appp to access your camera!\");\n            return;\n        }\n\n        const { cancelled, uri, base64 } = await ImagePicker.launchCameraAsync({\n            base64: true,\n        });\n\n        if (!cancelled) {\n            setImage(uri);\n            setStatus(\"Loading...\");\n            try {\n                const result = await callGoogleVisionAsync(base64, uri);\n                setStatus(result);\n            } catch (error) {\n                setStatus(`Error: ${error.message}`);\n            }\n        } else {\n            setImage(null);\n            setStatus(null);\n        }\n    };\n    const Main = ({ navigation }) => {\n        return (\n            <SafeAreaView>\n                {image ? (\n                    <ScrollView>\n                        <View\n                            style={{ backgroundColor: \"#5DB075\", height: 200 }}\n                        >\n                            <TouchableOpacity\n                                style={{\n                                    flexDirection: \"row\",\n                                    alignItems: \"center\",\n                                    marginTop: 10,\n                                }}\n                                onPress={() => {\n                                    setTypes(null);\n                                    setImage(null);\n                                }}\n                            >\n                                <Feather\n                                    name=\"chevrons-left\"\n                                    size={30}\n                                    color=\"white\"\n                                ></Feather>\n                                <Text\n                                    style={{\n                                        color: \"white\",\n                                        fontWeight: \"600\",\n                                        fontSize: 16,\n                                    }}\n                                >\n                                    Back\n                                </Text>\n                            </TouchableOpacity>\n                            <Text\n                                style={{\n                                    alignSelf: \"center\",\n                                    color: \"white\",\n                                    fontSize: 30,\n                                    fontWeight: \"700\",\n                                }}\n                            >\n                                Scan Results 🔎\n                            </Text>\n                        </View>\n                        <View\n                            style={{\n                                position: \"absolute\",\n                                alignSelf: \"center\",\n                                top: 100,\n                                shadowColor: \"black\",\n                                shadowOpacity: 0.2,\n                                shadowRadius: 10,\n                            }}\n                        >\n                            <Image\n                                source={{ uri: image }}\n                                style={{\n                                    width: 160,\n                                    height: 160,\n                                    borderRadius: 80,\n                                }}\n                            />\n                        </View>\n\n                        <View\n                            style={{\n                                alignItems: \"center\",\n                                paddingVertical: 80,\n                            }}\n                        >\n                            <Text\n                                style={{\n                                    fontSize: 28,\n                                    fontWeight: \"700\",\n                                }}\n                            >\n                                You have scanned:\n                            </Text>\n                            {!types && (\n                                <ActivityIndicator\n                                    size=\"large\"\n                                    color=\"#4B9460\"\n                                    marginTop={20}\n                                />\n                            )}\n                            {types &&\n                                types.map((type) => (\n                                    <View\n                                        style={{\n                                            flexDirection: \"column\",\n                                            alignItems: \"center\",\n                                            marginTop: 10,\n                                        }}\n                                    >\n                                        <Text\n                                            style={{\n                                                fontSize: 20,\n                                                fontWeight: \"600\",\n                                                opacity: 0.6,\n                                            }}\n                                        >\n                                            {type.kind}\n                                        </Text>\n                                        <Text\n                                            style={{\n                                                opacity: 0.4,\n                                            }}\n                                        >{`(${(type.accuracy * 100).toFixed(\n                                            2\n                                        )}% likely)`}</Text>\n                                    </View>\n                                ))}\n                            {types && (\n                                <>\n                                    <Text\n                                        style={{\n                                            fontSize: 24,\n                                            fontWeight: \"700\",\n                                            marginTop: 20,\n                                        }}\n                                    >\n                                        🎉 40 Points Earned! 🎉\n                                    </Text>\n                                    <View style={styles.card}>\n                                        <Text\n                                            style={{\n                                                color: \"#4B9460\",\n                                                fontSize: 20,\n                                                fontWeight: \"700\",\n                                            }}\n                                        >\n                                            Recycling Categories:\n                                        </Text>\n                                        <View\n                                            style={{\n                                                flexDirection: \"row\",\n                                                marginVertical: 10,\n                                                justifyContent: \"center\",\n                                            }}\n                                        >\n                                            <View style={styles.tag}>\n                                                <Text style={styles.kind}>\n                                                    Can\n                                                </Text>\n                                            </View>\n                                            <View style={styles.tag}>\n                                                <Text style={styles.kind}>\n                                                    Scrap Metal\n                                                </Text>\n                                            </View>\n                                        </View>\n                                        <TouchableOpacity\n                                            style={styles.add}\n                                            onPress={() =>\n                                                navigation.navigate(\"MapPage\")\n                                            }\n                                        >\n                                            <Text\n                                                style={{\n                                                    color: \"white\",\n                                                    fontWeight: \"700\",\n                                                    fontSize: 16,\n                                                    textAlign: \"center\",\n                                                    marginRight: 10,\n                                                }}\n                                            >\n                                                📍Find Nearest Recyling Bin\n                                            </Text>\n                                            <Feather\n                                                name=\"chevrons-right\"\n                                                size={30}\n                                                color=\"white\"\n                                            ></Feather>\n                                        </TouchableOpacity>\n                                    </View>\n                                    <View style={styles.fact}>\n                                        <Text\n                                            style={{\n                                                color: \"#4B9460\",\n                                                fontSize: 20,\n                                                fontWeight: \"700\",\n                                            }}\n                                        >\n                                            🤔Did you know?\n                                        </Text>\n                                        <Text style={styles.fact_text}>\n                                            Companies can produce as many as\n                                            80,000,000 Aluminum cans every year?{\" \"}\n                                        </Text>\n                                        <Text style={styles.fact_text}>\n                                            That’s a lot of soda!\n                                        </Text>\n                                    </View>\n                                </>\n                            )}\n                        </View>\n                    </ScrollView>\n                ) : (\n                    <View\n                        style={{\n                            backgroundColor: \"black\",\n                            justifyContent: \"center\",\n                            height: \"100%\",\n                        }}\n                    >\n                        <View\n                            style={{\n                                backgroundColor: \"white\",\n                                alignSelf: \"center\",\n                                borderRadius: 10,\n                                shadowColor: \"black\",\n                                shadowOpacity: 0.2,\n                                shadowRadius: 50,\n                                paddingHorizontal: 10,\n                                paddingVertical: 10,\n                            }}\n                        >\n                            <Button\n                                onPress={openCamera}\n                                title=\"Open camera\"\n                                color={\"grey\"}\n                            />\n                            <Button\n                                title=\"Pick an image from camera roll\"\n                                onPress={pickImage}\n                                color={\"grey\"}\n                            />\n                        </View>\n                    </View>\n                )}\n            </SafeAreaView>\n        );\n    };\n\n    return (\n        <Stack.Navigator screenOptions={{ headerShown: false }}>\n            <Stack.Screen name=\"Main\" component={Main}></Stack.Screen>\n            <Stack.Screen name=\"MapPage\" options={{ headerShown: false }}>\n                {(props) => (\n                    <MapPage\n                        {...props}\n                        currentLoc={currentLoc}\n                        locations={locations}\n                        addLocationEnabled={false}\n                        scanAnotherEnabled={true}\n                    ></MapPage>\n                )}\n            </Stack.Screen>\n        </Stack.Navigator>\n    );\n}\n\nconst styles = StyleSheet.create({\n    page: {},\n    add: {\n        alignSelf: \"center\",\n        backgroundColor: \"#5DB075\",\n        borderRadius: 30,\n        paddingHorizontal: 20,\n        paddingVertical: 15,\n        alignItems: \"center\",\n        flexDirection: \"row\",\n    },\n    tag: {\n        borderWidth: 1,\n\n        borderColor: \"#5DB075\",\n        paddingHorizontal: 8,\n        paddingVertical: 5,\n        borderRadius: 8,\n        marginHorizontal: 5,\n        marginVertical: 5,\n    },\n    kind: {\n        color: \"#5DB075\",\n        fontSize: 12,\n        fontWeight: \"500\",\n    },\n    card: {\n        backgroundColor: \"white\",\n        width: 320,\n        borderRadius: 15,\n        marginVertical: 20,\n        paddingVertical: 20,\n        paddingHorizontal: 20,\n        shadowColor: \"black\",\n        shadowOpacity: 0.1,\n        shadowRadius: 5,\n        alignItems: \"center\",\n    },\n    fact: {\n        width: 320,\n        paddingVertical: 20,\n        paddingHorizontal: 20,\n        borderRadius: 15,\n        borderColor: \"#5DB075\",\n        borderWidth: 2,\n        borderStyle: \"dashed\",\n    },\n    fact_text: {\n        // color: \"#4B9460\",\n        marginTop: 10,\n        opacity: 0.6,\n    },\n});\n"]},"metadata":{},"sourceType":"module"}